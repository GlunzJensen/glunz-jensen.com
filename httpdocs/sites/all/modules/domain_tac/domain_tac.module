<?php
/**
 * Bridge module to allow Domain Access and Taxonomy Access Control (TAC)
 * permissions to coexist by creating a different node_access "realm"
 * that merges the node_access rules of both modules
 *
 * From http://drupal.org/node/1355272
 *
 * Thanks for the help and input to agentrickard and BrightBold
 */

/**
 * Implements hook_enable(). 
 *
 * Prompt the site admin to rebuild the node_access table when 
 * this module is enabled.
 */
function domain_tac_enable() {
  node_access_needs_rebuild(TRUE);
}

/**
 * Implements hook_node_access_records_alter().
 *
 * Creates a different node_access "realm" (domain_tac) by merging the
 * node_access settings of the Domain Access and the TAC. modules.
 */
function domain_tac_node_access_records_alter(&$grants, $node) {
  $domain_ids = array();
  $tac_grants = array();

  foreach ($grants as $key => $grant) {
    switch ($grant['realm']) {
      case 'domain_id':
        $domain_ids[] = $grant['gid'];
        break;
      // We treat domain_site as just another domain with id = 'all'.
      case 'domain_site':
        $domain_ids[] = 'all';
        break;
      //case 'taxonomy_access_role':
      case 'tac_lite':
        $tac_grants[] = $grant;
        break;
    }
  }

  // If there are access records for both domain and tac, then we create our own
  // combined record.
  foreach ($domain_ids as $domain_id) {
    foreach ($tac_grants as $tac_grant) {
      $grants[] = array(
        'realm' => "domain_tac_{$domain_id}",
        'gid' => $tac_grant['gid'],
        'grant_view' => $tac_grant['grant_view'],
        'grant_update' => $tac_grant['grant_update'],
        'grant_delete' => $tac_grant['grant_delete'],
        'priority' => 0,
      );
    }
  }

  // If both domain grants and og grants exist for this node, then we are now
  // managing access to this node. Delete their grants from entering the record.
  if (!empty($domain_ids) && !empty($tac_grants)) {
    foreach ($grants as $key => $grant) {
      switch ($grant['realm']) {
        case 'domain_id':
        case 'domain_site':
        //case 'taxonomy_access_role':
        case 'tac_lite':
          unset($grants[$key]);
      }
    }
  }
}

/**
 * Implements hook_node_grants_alter().
 *
 * Based on the new node_access "realm" (domain_tac) it grants or revokes access
 * to nodes while ignoring the original node_access settings in Domain Access
 * and Organic Groups
 */
function domain_tac_node_grants_alter(&$grants, $account, $op) {
  $user_domains = array();
  $user_groups = array();
  
  // We treat domain_site as just another domain with id = 'all'.
  if (isset($grants['domain_site'])) {
    $user_domains = array_merge($user_domains, array('all'));
  }
  if (!empty($grants['domain_id'])) {
    $user_domains = array_merge($user_domains, $grants['domain_id']);
  }
  if (!empty($grants['taxonomy_access_role'])) {
    $user_groups = array_merge($user_groups, $grants['taxonomy_access_role']);
  }
  if (!empty($grants['tac_lite'])) {
    $user_groups = array_merge($user_groups, $grants['tac_lite']);
  }

  foreach ($user_domains as $user_domain) {
    foreach ($user_groups as $user_group) {
      $grants["domain_tac_{$user_domain}"][] = $user_group;
    }
  }
}